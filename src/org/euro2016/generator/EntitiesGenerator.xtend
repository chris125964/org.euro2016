/*
 * generated by Xtext
 */
package org.euro2016.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import org.euro2016.entities.Attribute
import org.euro2016.entities.BasicType
import org.euro2016.entities.Entity
import org.euro2016.entities.EntityAnnotation
import org.euro2016.entities.EntityType
import org.euro2016.entities.Identifier
import org.euro2016.entities.NotNull
import org.euro2016.entities.Pattern
import org.euro2016.entities.NamedQuery
import org.euro2016.entities.Package
import org.euro2016.entities.GeneratedValue
import org.euro2016.entities.ManyToOne

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class EntitiesGenerator implements IGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		for (e : resource.allContents.toIterable.filter(typeof(Entity))) {
			fsa.generateFile("entities/" + e.name + ".java", e.compile)
		}
	}

	def compile(Entity entity) {
		'''
			package de.todd.userdb.model;
			
			import java.util.List;
			import javax.persistence.Entity;
			import javax.persistence.GeneratedValue;
			import javax.persistence.Id;
			import javax.persistence.ManyToOne;
			import javax.persistence.NamedQueries;
			import javax.persistence.NamedQuery;
			import javax.persistence.OneToMany;
			import javax.validation.constraints.NotNull;
			import javax.validation.constraints.Pattern;
			
			«IF ! entity.annotations.empty»
				@NamedQueries({
					«FOR entityAnnotation : entity.annotations SEPARATOR ','»
						@NamedQuery(name = «entity.name».«entityAnnotation.nq.finder», query = "«entityAnnotation.nq.select»")
					«ENDFOR»
				})
			«ELSE»
				// Annotation existiert nicht
			«ENDIF»
			«IF entity.annotation == null»
			@Entity
			«ELSE»
			@Entity(name = "«entity.annotation»")
			«ENDIF»
			public class «entity.name» {
			
				«FOR entityAnnotation : entity.annotations»
					public static final String «entityAnnotation.nq.finder» = "«entityAnnotation.nq.klasse».«entityAnnotation.nq.finder»";
				«ENDFOR»
				«FOR entityAttribute : entity.attributes»
					«FOR attributeAnnotation : entityAttribute.annotations»
						«attributeAnnotation.type»
					«ENDFOR»
					«IF entityAttribute.type.isArray()»
						@OneToMany()
						private List<«entityAttribute.compileType»> «entityAttribute.name»;
					«ELSE»
						private «entityAttribute.compileType» «entityAttribute.name»;
					«ENDIF»
				«ENDFOR»
			
				«entity.compileConstructor»
			
				«FOR attribute : entity.attributes»
				«attribute.compileSetter»
			
				«attribute.compileGetter»
			
				«ENDFOR»
			}
		'''
	}

	def compileConstructor(Entity entity) {
		'''
			public «entity.name»() {
				super();
			}
		'''
	}

	def compileSetter(Attribute attribute) {
		'''
			«IF attribute.type.isArray()»
				public void set«attribute.name.toFirstUpper»(List<«attribute.compileType»> «attribute.name») {
			«ELSE»
				public void set«attribute.name.toFirstUpper»(«attribute.compileType» «attribute.name») {
			«ENDIF»
				this.«attribute.name» = «attribute.name»;
			}
		'''
	}

	def compileGetter(Attribute attribute) {
		'''
			«IF attribute.type.isArray()»
				public List<«attribute.compileType»> get«attribute.name.toFirstUpper»() {
			«ELSE»
				public «attribute.compileType» get«attribute.name.toFirstUpper»() {
			«ENDIF»
				return this.«attribute.name»;
			}
		'''
	}
	
	def compileId(Entity entity) {
		'''
		@GeneratedValue
		@Id
		private Long id;
		'''		
	}
	def compileGetterId(Entity entity) {
		'''
			public Long getId() {
				return this.id;
			}
		'''
	}
	def compileSetterId(Entity entity) {
		'''
			public void setId(Long id) {
				this.id = id;
			}
		'''
	}

	def compileType(Attribute attribute) {
		attribute.type.elementType.typeToString
	}
	
	def compileNamedConvention(Entity entity) {
		'''
		«entity.annotations»
		'''
	}

	def getType(Attribute attribute) {
	}

	def dispatch typeToString(BasicType type) {
		if(type.typeName == "string") "String" else type.typeName
	}

	def dispatch typeToString(EntityType type) {
		type.entity.name
	}
	
	def finder(NamedQuery entityAnnotation) {
		'''
		«entityAnnotation.finder»
		'''
	}
	def  klasse(NamedQuery entityAnnotation) {
		'''
		«entityAnnotation.klasse»
		'''
	}
	def  typ(NamedQuery entityAnnotation) {
		'''
		@NamedQuery(name = «entityAnnotation.klasse».«entityAnnotation.finder», query = "«entityAnnotation.select»")
		'''
	}
	def dispatch type(Identifier attributeAnnotation) {
		'''
		@Id
		'''
	}
	def dispatch type(NotNull attributeAnnotation) {
		'''
		 @NotNull
		'''
	}
	def dispatch type(Pattern attributeAnnotation) {
		'''
		@Pattern(regexp = "«attributeAnnotation.regexp»", message = "«attributeAnnotation.message»")
		'''
	}
	def dispatch type(GeneratedValue attributeAnnotation) {
		'''
		@GeneratedValue
		'''
	}
	def dispatch type(ManyToOne attributeAnnotation) {
		'''
		@ManyToOne
		'''
	}

}
